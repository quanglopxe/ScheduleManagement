#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QL_LICHHOP.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="QL_LICHHOP")]
	public partial class QL_LICHHOPDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDepartment(Department instance);
    partial void UpdateDepartment(Department instance);
    partial void DeleteDepartment(Department instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertMeetingAttachment(MeetingAttachment instance);
    partial void UpdateMeetingAttachment(MeetingAttachment instance);
    partial void DeleteMeetingAttachment(MeetingAttachment instance);
    partial void InsertMeetingHost(MeetingHost instance);
    partial void UpdateMeetingHost(MeetingHost instance);
    partial void DeleteMeetingHost(MeetingHost instance);
    partial void InsertMeetingParticipant(MeetingParticipant instance);
    partial void UpdateMeetingParticipant(MeetingParticipant instance);
    partial void DeleteMeetingParticipant(MeetingParticipant instance);
    partial void InsertMeeting(Meeting instance);
    partial void UpdateMeeting(Meeting instance);
    partial void DeleteMeeting(Meeting instance);
    partial void InsertScheduleType(ScheduleType instance);
    partial void UpdateScheduleType(ScheduleType instance);
    partial void DeleteScheduleType(ScheduleType instance);
    #endregion
		
		public QL_LICHHOPDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
        public QL_LICHHOPDataContext() :
                base(global::System.Configuration.ConfigurationManager.ConnectionStrings["QL_LICHHOPConnectionString"].ConnectionString, mappingSource)
        {
            OnCreated();
        }
        public QL_LICHHOPDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QL_LICHHOPDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QL_LICHHOPDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Department> Departments
		{
			get
			{
				return this.GetTable<Department>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<MeetingAttachment> MeetingAttachments
		{
			get
			{
				return this.GetTable<MeetingAttachment>();
			}
		}
		
		public System.Data.Linq.Table<MeetingHost> MeetingHosts
		{
			get
			{
				return this.GetTable<MeetingHost>();
			}
		}
		
		public System.Data.Linq.Table<MeetingParticipant> MeetingParticipants
		{
			get
			{
				return this.GetTable<MeetingParticipant>();
			}
		}
		
		public System.Data.Linq.Table<Meeting> Meetings
		{
			get
			{
				return this.GetTable<Meeting>();
			}
		}
		
		public System.Data.Linq.Table<ScheduleType> ScheduleTypes
		{
			get
			{
				return this.GetTable<ScheduleType>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Departments")]
	public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DepartmentID;
		
		private string _DepartmentName;
		
		private EntitySet<User> _Users;
		
		private EntitySet<Meeting> _Meetings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDepartmentIDChanging(int value);
    partial void OnDepartmentIDChanged();
    partial void OnDepartmentNameChanging(string value);
    partial void OnDepartmentNameChanged();
    #endregion
		
		public Department()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._Meetings = new EntitySet<Meeting>(new Action<Meeting>(this.attach_Meetings), new Action<Meeting>(this.detach_Meetings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string DepartmentName
		{
			get
			{
				return this._DepartmentName;
			}
			set
			{
				if ((this._DepartmentName != value))
				{
					this.OnDepartmentNameChanging(value);
					this.SendPropertyChanging();
					this._DepartmentName = value;
					this.SendPropertyChanged("DepartmentName");
					this.OnDepartmentNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_User", Storage="_Users", ThisKey="DepartmentID", OtherKey="DepartmentID")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Meeting", Storage="_Meetings", ThisKey="DepartmentID", OtherKey="DepartmentID")]
		public EntitySet<Meeting> Meetings
		{
			get
			{
				return this._Meetings;
			}
			set
			{
				this._Meetings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
		
		private void attach_Meetings(Meeting entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_Meetings(Meeting entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _FullName;
		
		private string _UserName;
		
		private string _PasswordHash;
		
		private string _PhoneNumber;
		
		private string _Email;
		
		private string _Role;
		
		private System.Nullable<bool> _RoleInMeet;
		
		private int _DepartmentID;
		
		private System.Nullable<System.DateTime> _CreatedAt;
		
		private string _CreatedBy;
		
		private System.Nullable<System.DateTime> _UpdatedAt;
		
		private string _UpdatedBy;
		
		private EntitySet<MeetingHost> _MeetingHosts;
		
		private EntitySet<MeetingParticipant> _MeetingParticipants;
		
		private EntityRef<Department> _Department;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordHashChanging(string value);
    partial void OnPasswordHashChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnRoleChanging(string value);
    partial void OnRoleChanged();
    partial void OnRoleInMeetChanging(System.Nullable<bool> value);
    partial void OnRoleInMeetChanged();
    partial void OnDepartmentIDChanging(int value);
    partial void OnDepartmentIDChanged();
    partial void OnCreatedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedAtChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnUpdatedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedAtChanged();
    partial void OnUpdatedByChanging(string value);
    partial void OnUpdatedByChanged();
    #endregion
		
		public User()
		{
			this._MeetingHosts = new EntitySet<MeetingHost>(new Action<MeetingHost>(this.attach_MeetingHosts), new Action<MeetingHost>(this.detach_MeetingHosts));
			this._MeetingParticipants = new EntitySet<MeetingParticipant>(new Action<MeetingParticipant>(this.attach_MeetingParticipants), new Action<MeetingParticipant>(this.detach_MeetingParticipants));
			this._Department = default(EntityRef<Department>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(100)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordHash", DbType="NVarChar(255)")]
		public string PasswordHash
		{
			get
			{
				return this._PasswordHash;
			}
			set
			{
				if ((this._PasswordHash != value))
				{
					this.OnPasswordHashChanging(value);
					this.SendPropertyChanging();
					this._PasswordHash = value;
					this.SendPropertyChanged("PasswordHash");
					this.OnPasswordHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVarChar(20)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(255)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Role
		{
			get
			{
				return this._Role;
			}
			set
			{
				if ((this._Role != value))
				{
					this.OnRoleChanging(value);
					this.SendPropertyChanging();
					this._Role = value;
					this.SendPropertyChanged("Role");
					this.OnRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleInMeet", DbType="Bit")]
		public System.Nullable<bool> RoleInMeet
		{
			get
			{
				return this._RoleInMeet;
			}
			set
			{
				if ((this._RoleInMeet != value))
				{
					this.OnRoleInMeetChanging(value);
					this.SendPropertyChanging();
					this._RoleInMeet = value;
					this.SendPropertyChanged("RoleInMeet");
					this.OnRoleInMeetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="Int NOT NULL")]
		public int DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedAt
		{
			get
			{
				return this._CreatedAt;
			}
			set
			{
				if ((this._CreatedAt != value))
				{
					this.OnCreatedAtChanging(value);
					this.SendPropertyChanging();
					this._CreatedAt = value;
					this.SendPropertyChanged("CreatedAt");
					this.OnCreatedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="NVarChar(255)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedAt
		{
			get
			{
				return this._UpdatedAt;
			}
			set
			{
				if ((this._UpdatedAt != value))
				{
					this.OnUpdatedAtChanging(value);
					this.SendPropertyChanging();
					this._UpdatedAt = value;
					this.SendPropertyChanged("UpdatedAt");
					this.OnUpdatedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="NVarChar(255)")]
		public string UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_MeetingHost", Storage="_MeetingHosts", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<MeetingHost> MeetingHosts
		{
			get
			{
				return this._MeetingHosts;
			}
			set
			{
				this._MeetingHosts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_MeetingParticipant", Storage="_MeetingParticipants", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<MeetingParticipant> MeetingParticipants
		{
			get
			{
				return this._MeetingParticipants;
			}
			set
			{
				this._MeetingParticipants.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_User", Storage="_Department", ThisKey="DepartmentID", OtherKey="DepartmentID", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._DepartmentID = value.DepartmentID;
					}
					else
					{
						this._DepartmentID = default(int);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MeetingHosts(MeetingHost entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_MeetingHosts(MeetingHost entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_MeetingParticipants(MeetingParticipant entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_MeetingParticipants(MeetingParticipant entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MeetingAttachments")]
	public partial class MeetingAttachment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _MeetingID;
		
		private string _FilePath;
		
		private string _UploadedBy;
		
		private System.Nullable<System.DateTime> _UploadedAt;
		
		private EntityRef<Meeting> _Meeting;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMeetingIDChanging(int value);
    partial void OnMeetingIDChanged();
    partial void OnFilePathChanging(string value);
    partial void OnFilePathChanged();
    partial void OnUploadedByChanging(string value);
    partial void OnUploadedByChanged();
    partial void OnUploadedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnUploadedAtChanged();
    #endregion
		
		public MeetingAttachment()
		{
			this._Meeting = default(EntityRef<Meeting>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeetingID", DbType="Int NOT NULL")]
		public int MeetingID
		{
			get
			{
				return this._MeetingID;
			}
			set
			{
				if ((this._MeetingID != value))
				{
					if (this._Meeting.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeetingIDChanging(value);
					this.SendPropertyChanging();
					this._MeetingID = value;
					this.SendPropertyChanged("MeetingID");
					this.OnMeetingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilePath", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string FilePath
		{
			get
			{
				return this._FilePath;
			}
			set
			{
				if ((this._FilePath != value))
				{
					this.OnFilePathChanging(value);
					this.SendPropertyChanging();
					this._FilePath = value;
					this.SendPropertyChanged("FilePath");
					this.OnFilePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UploadedBy", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string UploadedBy
		{
			get
			{
				return this._UploadedBy;
			}
			set
			{
				if ((this._UploadedBy != value))
				{
					this.OnUploadedByChanging(value);
					this.SendPropertyChanging();
					this._UploadedBy = value;
					this.SendPropertyChanged("UploadedBy");
					this.OnUploadedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UploadedAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> UploadedAt
		{
			get
			{
				return this._UploadedAt;
			}
			set
			{
				if ((this._UploadedAt != value))
				{
					this.OnUploadedAtChanging(value);
					this.SendPropertyChanging();
					this._UploadedAt = value;
					this.SendPropertyChanged("UploadedAt");
					this.OnUploadedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Meeting_MeetingAttachment", Storage="_Meeting", ThisKey="MeetingID", OtherKey="MeetingID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Meeting Meeting
		{
			get
			{
				return this._Meeting.Entity;
			}
			set
			{
				Meeting previousValue = this._Meeting.Entity;
				if (((previousValue != value) 
							|| (this._Meeting.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Meeting.Entity = null;
						previousValue.MeetingAttachments.Remove(this);
					}
					this._Meeting.Entity = value;
					if ((value != null))
					{
						value.MeetingAttachments.Add(this);
						this._MeetingID = value.MeetingID;
					}
					else
					{
						this._MeetingID = default(int);
					}
					this.SendPropertyChanged("Meeting");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MeetingHosts")]
	public partial class MeetingHost : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _MeetingID;
		
		private int _UserID;
		
		private string _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedAt;
		
		private EntityRef<User> _User;
		
		private EntityRef<Meeting> _Meeting;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMeetingIDChanging(int value);
    partial void OnMeetingIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCreatedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedAtChanged();
    #endregion
		
		public MeetingHost()
		{
			this._User = default(EntityRef<User>);
			this._Meeting = default(EntityRef<Meeting>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeetingID", DbType="Int NOT NULL")]
		public int MeetingID
		{
			get
			{
				return this._MeetingID;
			}
			set
			{
				if ((this._MeetingID != value))
				{
					if (this._Meeting.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeetingIDChanging(value);
					this.SendPropertyChanging();
					this._MeetingID = value;
					this.SendPropertyChanged("MeetingID");
					this.OnMeetingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="NVarChar(255)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedAt
		{
			get
			{
				return this._CreatedAt;
			}
			set
			{
				if ((this._CreatedAt != value))
				{
					this.OnCreatedAtChanging(value);
					this.SendPropertyChanging();
					this._CreatedAt = value;
					this.SendPropertyChanged("CreatedAt");
					this.OnCreatedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_MeetingHost", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.MeetingHosts.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.MeetingHosts.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Meeting_MeetingHost", Storage="_Meeting", ThisKey="MeetingID", OtherKey="MeetingID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Meeting Meeting
		{
			get
			{
				return this._Meeting.Entity;
			}
			set
			{
				Meeting previousValue = this._Meeting.Entity;
				if (((previousValue != value) 
							|| (this._Meeting.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Meeting.Entity = null;
						previousValue.MeetingHosts.Remove(this);
					}
					this._Meeting.Entity = value;
					if ((value != null))
					{
						value.MeetingHosts.Add(this);
						this._MeetingID = value.MeetingID;
					}
					else
					{
						this._MeetingID = default(int);
					}
					this.SendPropertyChanged("Meeting");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MeetingParticipants")]
	public partial class MeetingParticipant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _MeetingID;
		
		private int _UserID;
		
		private string _Note;
		
		private string _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedAt;
		
		private string _UpdatedBy;
		
		private System.Nullable<System.DateTime> _UpdatedAt;
		
		private EntityRef<User> _User;
		
		private EntityRef<Meeting> _Meeting;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMeetingIDChanging(int value);
    partial void OnMeetingIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCreatedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedAtChanged();
    partial void OnUpdatedByChanging(string value);
    partial void OnUpdatedByChanged();
    partial void OnUpdatedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedAtChanged();
    #endregion
		
		public MeetingParticipant()
		{
			this._User = default(EntityRef<User>);
			this._Meeting = default(EntityRef<Meeting>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeetingID", DbType="Int NOT NULL")]
		public int MeetingID
		{
			get
			{
				return this._MeetingID;
			}
			set
			{
				if ((this._MeetingID != value))
				{
					if (this._Meeting.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeetingIDChanging(value);
					this.SendPropertyChanging();
					this._MeetingID = value;
					this.SendPropertyChanged("MeetingID");
					this.OnMeetingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(50)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="NVarChar(255)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedAt
		{
			get
			{
				return this._CreatedAt;
			}
			set
			{
				if ((this._CreatedAt != value))
				{
					this.OnCreatedAtChanging(value);
					this.SendPropertyChanging();
					this._CreatedAt = value;
					this.SendPropertyChanged("CreatedAt");
					this.OnCreatedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="NVarChar(255)")]
		public string UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedAt
		{
			get
			{
				return this._UpdatedAt;
			}
			set
			{
				if ((this._UpdatedAt != value))
				{
					this.OnUpdatedAtChanging(value);
					this.SendPropertyChanging();
					this._UpdatedAt = value;
					this.SendPropertyChanged("UpdatedAt");
					this.OnUpdatedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_MeetingParticipant", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.MeetingParticipants.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.MeetingParticipants.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Meeting_MeetingParticipant", Storage="_Meeting", ThisKey="MeetingID", OtherKey="MeetingID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Meeting Meeting
		{
			get
			{
				return this._Meeting.Entity;
			}
			set
			{
				Meeting previousValue = this._Meeting.Entity;
				if (((previousValue != value) 
							|| (this._Meeting.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Meeting.Entity = null;
						previousValue.MeetingParticipants.Remove(this);
					}
					this._Meeting.Entity = value;
					if ((value != null))
					{
						value.MeetingParticipants.Add(this);
						this._MeetingID = value.MeetingID;
					}
					else
					{
						this._MeetingID = default(int);
					}
					this.SendPropertyChanged("Meeting");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Meetings")]
	public partial class Meeting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MeetingID;
		
		private string _Title;
		
		private string _RegistrationPlace;
		
		private int _DepartmentID;
		
		private int _ScheduleTypeID;
		
		private string _ScheduleType;
		
		private System.DateTime _StartTime;
		
		private int _DurationMinutes;
		
		private string _Location;
		
		private string _VehicleType;
		
		private string _Preparation;
		
		private string _Status;
		
		private string _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedAt;
		
		private string _UpdatedBy;
		
		private System.Nullable<System.DateTime> _UpdatedAt;
		
		private EntitySet<MeetingAttachment> _MeetingAttachments;
		
		private EntitySet<MeetingHost> _MeetingHosts;
		
		private EntitySet<MeetingParticipant> _MeetingParticipants;
		
		private EntityRef<Department> _Department;
		
		private EntityRef<ScheduleType> _ScheduleType1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMeetingIDChanging(int value);
    partial void OnMeetingIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnRegistrationPlaceChanging(string value);
    partial void OnRegistrationPlaceChanged();
    partial void OnDepartmentIDChanging(int value);
    partial void OnDepartmentIDChanged();
    partial void OnScheduleTypeIDChanging(int value);
    partial void OnScheduleTypeIDChanged();
    partial void OnScheduleTypeChanging(string value);
    partial void OnScheduleTypeChanged();
    partial void OnStartTimeChanging(System.DateTime value);
    partial void OnStartTimeChanged();
    partial void OnDurationMinutesChanging(int value);
    partial void OnDurationMinutesChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnVehicleTypeChanging(string value);
    partial void OnVehicleTypeChanged();
    partial void OnPreparationChanging(string value);
    partial void OnPreparationChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCreatedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedAtChanged();
    partial void OnUpdatedByChanging(string value);
    partial void OnUpdatedByChanged();
    partial void OnUpdatedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedAtChanged();
    #endregion
		
		public Meeting()
		{
			this._MeetingAttachments = new EntitySet<MeetingAttachment>(new Action<MeetingAttachment>(this.attach_MeetingAttachments), new Action<MeetingAttachment>(this.detach_MeetingAttachments));
			this._MeetingHosts = new EntitySet<MeetingHost>(new Action<MeetingHost>(this.attach_MeetingHosts), new Action<MeetingHost>(this.detach_MeetingHosts));
			this._MeetingParticipants = new EntitySet<MeetingParticipant>(new Action<MeetingParticipant>(this.attach_MeetingParticipants), new Action<MeetingParticipant>(this.detach_MeetingParticipants));
			this._Department = default(EntityRef<Department>);
			this._ScheduleType1 = default(EntityRef<ScheduleType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeetingID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MeetingID
		{
			get
			{
				return this._MeetingID;
			}
			set
			{
				if ((this._MeetingID != value))
				{
					this.OnMeetingIDChanging(value);
					this.SendPropertyChanging();
					this._MeetingID = value;
					this.SendPropertyChanged("MeetingID");
					this.OnMeetingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegistrationPlace", DbType="NVarChar(MAX)")]
		public string RegistrationPlace
		{
			get
			{
				return this._RegistrationPlace;
			}
			set
			{
				if ((this._RegistrationPlace != value))
				{
					this.OnRegistrationPlaceChanging(value);
					this.SendPropertyChanging();
					this._RegistrationPlace = value;
					this.SendPropertyChanged("RegistrationPlace");
					this.OnRegistrationPlaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="Int NOT NULL")]
		public int DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScheduleTypeID", DbType="Int NOT NULL")]
		public int ScheduleTypeID
		{
			get
			{
				return this._ScheduleTypeID;
			}
			set
			{
				if ((this._ScheduleTypeID != value))
				{
					if (this._ScheduleType1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnScheduleTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ScheduleTypeID = value;
					this.SendPropertyChanged("ScheduleTypeID");
					this.OnScheduleTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScheduleType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ScheduleType
		{
			get
			{
				return this._ScheduleType;
			}
			set
			{
				if ((this._ScheduleType != value))
				{
					this.OnScheduleTypeChanging(value);
					this.SendPropertyChanging();
					this._ScheduleType = value;
					this.SendPropertyChanged("ScheduleType");
					this.OnScheduleTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="DateTime NOT NULL")]
		public System.DateTime StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DurationMinutes", DbType="Int NOT NULL")]
		public int DurationMinutes
		{
			get
			{
				return this._DurationMinutes;
			}
			set
			{
				if ((this._DurationMinutes != value))
				{
					this.OnDurationMinutesChanging(value);
					this.SendPropertyChanging();
					this._DurationMinutes = value;
					this.SendPropertyChanged("DurationMinutes");
					this.OnDurationMinutesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleType", DbType="NVarChar(255)")]
		public string VehicleType
		{
			get
			{
				return this._VehicleType;
			}
			set
			{
				if ((this._VehicleType != value))
				{
					this.OnVehicleTypeChanging(value);
					this.SendPropertyChanging();
					this._VehicleType = value;
					this.SendPropertyChanged("VehicleType");
					this.OnVehicleTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Preparation", DbType="NVarChar(MAX)")]
		public string Preparation
		{
			get
			{
				return this._Preparation;
			}
			set
			{
				if ((this._Preparation != value))
				{
					this.OnPreparationChanging(value);
					this.SendPropertyChanging();
					this._Preparation = value;
					this.SendPropertyChanged("Preparation");
					this.OnPreparationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(50)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="NVarChar(255)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedAt
		{
			get
			{
				return this._CreatedAt;
			}
			set
			{
				if ((this._CreatedAt != value))
				{
					this.OnCreatedAtChanging(value);
					this.SendPropertyChanging();
					this._CreatedAt = value;
					this.SendPropertyChanged("CreatedAt");
					this.OnCreatedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="NVarChar(255)")]
		public string UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedAt
		{
			get
			{
				return this._UpdatedAt;
			}
			set
			{
				if ((this._UpdatedAt != value))
				{
					this.OnUpdatedAtChanging(value);
					this.SendPropertyChanging();
					this._UpdatedAt = value;
					this.SendPropertyChanged("UpdatedAt");
					this.OnUpdatedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Meeting_MeetingAttachment", Storage="_MeetingAttachments", ThisKey="MeetingID", OtherKey="MeetingID")]
		public EntitySet<MeetingAttachment> MeetingAttachments
		{
			get
			{
				return this._MeetingAttachments;
			}
			set
			{
				this._MeetingAttachments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Meeting_MeetingHost", Storage="_MeetingHosts", ThisKey="MeetingID", OtherKey="MeetingID")]
		public EntitySet<MeetingHost> MeetingHosts
		{
			get
			{
				return this._MeetingHosts;
			}
			set
			{
				this._MeetingHosts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Meeting_MeetingParticipant", Storage="_MeetingParticipants", ThisKey="MeetingID", OtherKey="MeetingID")]
		public EntitySet<MeetingParticipant> MeetingParticipants
		{
			get
			{
				return this._MeetingParticipants;
			}
			set
			{
				this._MeetingParticipants.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Meeting", Storage="_Department", ThisKey="DepartmentID", OtherKey="DepartmentID", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Meetings.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Meetings.Add(this);
						this._DepartmentID = value.DepartmentID;
					}
					else
					{
						this._DepartmentID = default(int);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ScheduleType_Meeting", Storage="_ScheduleType1", ThisKey="ScheduleTypeID", OtherKey="ScheduleTypeID", IsForeignKey=true)]
		public ScheduleType ScheduleType1
		{
			get
			{
				return this._ScheduleType1.Entity;
			}
			set
			{
				ScheduleType previousValue = this._ScheduleType1.Entity;
				if (((previousValue != value) 
							|| (this._ScheduleType1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ScheduleType1.Entity = null;
						previousValue.Meetings.Remove(this);
					}
					this._ScheduleType1.Entity = value;
					if ((value != null))
					{
						value.Meetings.Add(this);
						this._ScheduleTypeID = value.ScheduleTypeID;
					}
					else
					{
						this._ScheduleTypeID = default(int);
					}
					this.SendPropertyChanged("ScheduleType1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MeetingAttachments(MeetingAttachment entity)
		{
			this.SendPropertyChanging();
			entity.Meeting = this;
		}
		
		private void detach_MeetingAttachments(MeetingAttachment entity)
		{
			this.SendPropertyChanging();
			entity.Meeting = null;
		}
		
		private void attach_MeetingHosts(MeetingHost entity)
		{
			this.SendPropertyChanging();
			entity.Meeting = this;
		}
		
		private void detach_MeetingHosts(MeetingHost entity)
		{
			this.SendPropertyChanging();
			entity.Meeting = null;
		}
		
		private void attach_MeetingParticipants(MeetingParticipant entity)
		{
			this.SendPropertyChanging();
			entity.Meeting = this;
		}
		
		private void detach_MeetingParticipants(MeetingParticipant entity)
		{
			this.SendPropertyChanging();
			entity.Meeting = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ScheduleTypes")]
	public partial class ScheduleType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ScheduleTypeID;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<Meeting> _Meetings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnScheduleTypeIDChanging(int value);
    partial void OnScheduleTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public ScheduleType()
		{
			this._Meetings = new EntitySet<Meeting>(new Action<Meeting>(this.attach_Meetings), new Action<Meeting>(this.detach_Meetings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScheduleTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ScheduleTypeID
		{
			get
			{
				return this._ScheduleTypeID;
			}
			set
			{
				if ((this._ScheduleTypeID != value))
				{
					this.OnScheduleTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ScheduleTypeID = value;
					this.SendPropertyChanged("ScheduleTypeID");
					this.OnScheduleTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ScheduleType_Meeting", Storage="_Meetings", ThisKey="ScheduleTypeID", OtherKey="ScheduleTypeID")]
		public EntitySet<Meeting> Meetings
		{
			get
			{
				return this._Meetings;
			}
			set
			{
				this._Meetings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Meetings(Meeting entity)
		{
			this.SendPropertyChanging();
			entity.ScheduleType1 = this;
		}
		
		private void detach_Meetings(Meeting entity)
		{
			this.SendPropertyChanging();
			entity.ScheduleType1 = null;
		}
	}
}
#pragma warning restore 1591
