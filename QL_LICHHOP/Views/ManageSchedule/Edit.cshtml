
@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var users = ViewBag.Users as List<QL_LICHHOP.Models.User>; // Ép kiểu danh sách người dùng
    var departments = ViewBag.Departments as List<QL_LICHHOP.Models.Department>; // Ép kiểu danh sách phòng ban
}

@model QL_LICHHOP.ViewModels.MeetingViewModel
<style>
    .form-control, .form-select {
        border: 2px solid #007bff; /* Màu viền */
        border-radius: 0.25rem; /* Đường viền bo tròn */
        transition: border-color 0.2s; /* Hiệu ứng chuyển tiếp */
    }

        .form-control:focus, .form-select:focus {
            border-color: #0056b3; /* Màu viền khi có tiêu điểm */
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25); /* Hiệu ứng bóng */
        }

    #employeeSuggestions {
        background-color: #f1f1f1; /* Màu nền xám */
        border: 1px solid #ccc; /* Viền nhẹ */
        max-height: 200px; /* Chiều cao tối đa */
        overflow-y: auto; /* Cuộn khi vượt quá chiều cao */
        position: absolute; /* Để hiển thị ở vị trí chính xác */
        z-index: 1000; /* Đảm bảo hiển thị trên các phần tử khác */
    }

    .dropdown-item {
        padding: 10px; /* Khoảng cách trong mỗi mục */
        cursor: pointer; /* Con trỏ khi rê chuột vào */
    }

        .dropdown-item:hover {
            background-color: #e0e0e0; /* Màu nền khi rê chuột vào */
        }
</style>

@using (Html.BeginForm("Edit", "ManageSchedule", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.MeetingID)

    <div class="form-group row mt-2">
        <label class="col-md-2 col-form-label" style="background-color: lightblue; text-align: right">Nơi đăng ký</label>
        <div class="col-md-2">
            @Html.DropDownListFor(m => m.DepartmentId, new SelectList(ViewBag.Departments, "DepartmentID", "DepartmentName", Model.DepartmentId), "", new { @class = "form-select" })
        </div>
        <label class="col-md-2 col-form-label" style="background-color: lightblue; text-align: right">Lịch làm việc của <span style="color: red">(*)</span></label>
        <div class="col-md-3">
            @Html.DropDownListFor(m => m.ScheduleTypeID, new SelectList(ViewBag.ScheduleTypes, "ScheduleTypeID", "Name", Model.ScheduleTypeID), "", new { @class = "form-select" })
        </div>
    </div>

    <div class="form-group row mt-2">
        <label class="col-md-2 col-form-label" style="background-color: lightblue; text-align: right">Loại lịch <span style="color: red">(*)</span></label>
        <div class="col-md-2">
            @Html.DropDownListFor(m => m.ScheduleType, new SelectList(new List<SelectListItem>
            {
                new SelectListItem { Value = "Sáng", Text = "Sáng" },
                new SelectListItem { Value = "Chiều", Text = "Chiều" },
                new SelectListItem { Value = "Cả ngày", Text = "Cả ngày" }
            }, "Value", "Text", Model.ScheduleType), "", new { @class = "form-select", required = "required" })
        </div>
        <label class="col-md-1 col-form-label" style="background-color: lightblue; text-align: right">Thời gian <span style="color: red">(*)</span></label>
        <div class="col-md-2">
            <input type="datetime-local" id="StartTime" name="StartTime"
                   class="form-control"
                   required="required"
                   value="@((Model.StartTime.HasValue) ? Model.StartTime.Value.ToString("yyyy-MM-ddTHH:mm") : DateTime.Now.ToString("yyyy-MM-ddTHH:mm"))" />
        </div>
        <label class="col-md-2 col-form-label" style="background-color: lightblue; text-align: right">Thời gian họp dự kiến (phút)</label>
        <div class="col-md-2">
            @Html.TextBoxFor(m => m.DurationMinutes, new { @class = "form-control", type = "number", required = "required", min = "0", value = Model.DurationMinutes })
        </div>
    </div>

    <div class="form-group row mt-2">
        <label class="col-md-2 col-form-label" style="background-color: lightblue; text-align: right">Người chủ trì</label>
        <div class="col-md-2">
            @Html.DropDownListFor(m => m.HostUserID, new SelectList(ViewBag.Hosts, "UserID", "FullName", Model.HostUserID), "-- Chọn người chủ trì --", new { @class = "form-select", required = "required" })
        </div>
        <div class="col-md-3">
            <input type="text" id="txtCustomHost" class="form-control" placeholder="Nhập người chủ trì khác..." />
        </div>
        <div class="col-md-2">
            <button id="btnAddHost" type="button" class="btn btn-primary">Thêm mới người chủ trì</button>
        </div>
    </div>

    <div class="form-group row mt-2">
        <label class="col-md-2 col-form-label" style="background-color: lightblue; text-align: right">Nội dung <span style="color: red">(*)</span></label>
        <div class="col-md-9">
            @Html.TextBoxFor(m => m.Title, new { @class = "form-control", required = "required" })
        </div>
    </div>

    <div class="form-group row mt-2">
        <label class="col-md-2 col-form-label" style="background-color: lightblue; text-align: right">Địa điểm</label>
        <div class="col-md-9">
            @Html.TextBoxFor(m => m.Location, new { @class = "form-control", required = "required" })
        </div>
    </div>

    <div class="form-group row mt-2">
        <label class="col-md-2 col-form-label" style="background-color: lightblue; text-align: right">
            Thành phần tham dự
        </label>
        <div class="col-md-2">
            <select id="department" class="form-select">
                <option value="">-- Chọn phòng ban --</option>
                @foreach (var department in ViewBag.Departments)
                {
                    <option value="@department.DepartmentID">@department.DepartmentName</option>
                }
            </select>
        </div>
        <div class="col-md-3">
            <input type="text" id="employeeName" class="form-control" placeholder="Nhập tên người tham dự" />
            <div id="employeeSuggestions" class="list-group"></div>
        </div>
        <div class="col-md-3">
            <button id="addParticipant" type="button" class="btn btn-primary">Thêm</button>
        </div>
    </div>

    <!-- Danh sách người tham dự -->
    <div class="form-group row mt-2">
        <div class="col-md-2"></div>
        <div class="col-md-9">
            <input type="hidden" id="employeeID" value="" />
            <ul id="participantList" class="list-group">
                @for (int i = 0; i < Model.Participants.Count; i++)
                {
                    var participant = Model.Participants[i];
                    <li class="list-group-item" data-user-id="@participant.UserID" data-department-id="@participant.DepartmentID">
                        @if (participant.UserID > 0)
                        {
                            <span>@participant.DepartmentName - @participant.FullName</span>
                        }
                        else
                        {
                            <span>@participant.DepartmentName</span>
                        }
                        <input type="hidden" name="Participants[@i].DepartmentID" value="@participant.DepartmentID" />
                        <input type="hidden" name="Participants[@i].UserID" value="@participant.UserID" />
                        <button class="btn btn-danger btn-sm float-end remove-participant">Xóa</button>
                    </li>
                }
            </ul>
        </div>
    </div>

    <div class="form-group row mt-2">
        <label style="background-color: lightblue; text-align: right" class="col-md-2 col-form-label">Phương tiện</label>
        <div class="col-md-3">
            @Html.DropDownListFor(m => m.VehicleType, new SelectList(new List<SelectListItem>
            {
                new SelectListItem { Value = "Xe công ty", Text = "Xe công ty" },
                new SelectListItem { Value = "Xe cá nhân", Text = "Xe cá nhân" },
                new SelectListItem { Value = "Máy bay", Text = "Máy bay" }
            }, "Value", "Text"), "", new { @class = "form-select", required = "required" })
        </div>
    </div>

    <div class="form-group row mt-2">
        <label style="background-color: lightblue; text-align: right" class="col-md-2 col-form-label">Chuẩn bị</label>
        <div class="col-md-9">
            @Html.TextBoxFor(m => m.Title, new { @class = "form-control" })
        </div>
    </div>

    <div class="form-group row mt-2">
        <label class="col-md-2 col-form-label" style="background-color: lightblue; text-align: right">Đính kèm tài liệu</label>
        <div class="col-md-9">
            <input type="file" id="fileInput" name="Attachments" multiple class="form-control" />
        </div>
    </div>
    <input type="hidden" id="existingFiles" name="ExistingAttachments" value="@string.Join(",", Model.AttachmentPaths)" />

    <div class="form-group row mt-2">
        <div class="col-md-2" style="background-color: lightblue"></div>
        <div class="col-md-9">
            <ul id="fileList" class="list-group">
                @foreach (var filePath in Model.AttachmentPaths)
                {
                    var fileName = System.IO.Path.GetFileName(filePath);
                    <li class="list-group-item">
                        @fileName.Substring(fileName.IndexOf('_') + 1)
                        <a href="@Url.Action("DownloadFile", "ManageSchedule", new { fileName = fileName })" target="_blank">
                            Tải xuống
                        </a>
                    </li>
                }
            </ul>
        </div>
    </div>

    <input type="hidden" name="currentController" value="@ViewBag.CurrentController" />
    <input type="hidden" name="selectedDates" value="@ViewBag.SelectedDates" />

    <center><button type="submit" class="btn btn-primary">Cập nhật lịch họp</button></center>
}

<script>
    document.getElementById('addParticipant').addEventListener('click', function () {
        var departmentSelect = document.getElementById('department');
        var departmentID = departmentSelect.value;
        var departmentName = departmentSelect.options[departmentSelect.selectedIndex]?.text;
        var employeeName = document.getElementById('employeeName').value.trim();
        var userID = document.getElementById('employeeID').value; // Lấy UserID từ một input ẩn

        if (!departmentID && !employeeName) {
            alert('Vui lòng chọn phòng ban hoặc nhập tên nhân viên.');
            return;
        }

        var participantList = document.getElementById('participantList');
        var listItem = document.createElement('li');
        listItem.className = 'list-group-item';
        listItem.dataset.userId = userID || '0'; // Lưu UserID vào thuộc tính dữ liệu
        listItem.dataset.departmentId = departmentID || ''; // Lưu DepartmentID vào thuộc tính dữ liệu

        if (departmentID && employeeName) {
            listItem.textContent = departmentName + ' - ' + employeeName;
        } else {
            listItem.textContent = departmentName;
        }

        // Input ẩn để bind dữ liệu vào Participants
        var hiddenDepartmentInput = document.createElement('input');
        hiddenDepartmentInput.type = 'hidden';
        hiddenDepartmentInput.name = 'Participants[' + participantList.children.length + '].DepartmentID';
        hiddenDepartmentInput.value = departmentID || '';

        var hiddenUserInput = document.createElement('input');
        hiddenUserInput.type = 'hidden';
        hiddenUserInput.name = 'Participants[' + participantList.children.length + '].UserID';
        hiddenUserInput.value = userID || '0'; // Nếu không có UserID, đặt tạm là 0

        listItem.appendChild(hiddenDepartmentInput);
        listItem.appendChild(hiddenUserInput);

        // Nút xóa
        var removeButton = document.createElement('button');
        removeButton.className = 'btn btn-danger btn-sm float-end';
        removeButton.textContent = 'Xóa';
        removeButton.addEventListener('click', function () {
            participantList.removeChild(listItem);
        });

        listItem.appendChild(removeButton);
        participantList.appendChild(listItem);

        // Reset các trường nhập liệu
        document.getElementById('employeeName').value = '';
        document.getElementById('employeeID').value = ''; // Reset UserID
    });

    // Sự kiện cho nút xóa đã tồn tại
    document.querySelectorAll('.remove-participant').forEach(button => {
        button.addEventListener('click', function () {
            var listItem = button.parentElement;
            participantList.removeChild(listItem);
        });
    });



    document.addEventListener("DOMContentLoaded", function () {
        document.getElementById('employeeName').addEventListener('keyup', suggestEmployees);
    });

    // Gợi ý nhân viên theo ký tự nhập vào
    function suggestEmployees() {
        var departmentId = document.getElementById('department').value;
        var input = document.getElementById('employeeName');
        var query = input.value.trim();

        if (query.length < 1 || !departmentId) {
            document.getElementById('employeeSuggestions').innerHTML = "";
            document.getElementById('employeeSuggestions').style.display = "none";
            return;
        }

        $.ajax({
            url: '@Url.Action("SearchEmployees", "ManageSchedule")',
            type: 'GET',
            data: { departmentId: departmentId, query: query },
            success: function (employees) {
                var suggestionBox = document.getElementById('employeeSuggestions');
                suggestionBox.innerHTML = "";
                suggestionBox.style.display = "block";

                employees.forEach(function (employee) {
                    var option = document.createElement('div');
                    option.className = "dropdown-item";
                    option.textContent = employee.FullName;
                    option.onclick = function () {
                        input.value = employee.FullName;
                        document.getElementById('employeeID').value = employee.UserID;
                        suggestionBox.style.display = "none";
                    };
                    suggestionBox.appendChild(option);
                });
            }
        });
    }

    // Ẩn gợi ý khi click ra ngoài
    document.addEventListener("click", function (e) {
        if (!document.getElementById('employeeName').contains(e.target)) {
            document.getElementById('employeeSuggestions').style.display = "none";
        }
    });


    // Xử lý thêm tài liệu đính kèm
    document.getElementById('fileInput').addEventListener('change', function (event) {
        const fileList = document.getElementById('fileList');
        fileList.innerHTML = ''; // Xóa danh sách hiện tại để không trùng lặp

        Array.from(event.target.files).forEach((file) => {
            const listItem = document.createElement('li');
            listItem.className = 'list-group-item d-flex justify-content-between align-items-center';
            listItem.textContent = file.name;

            // Nút xem file
            const viewButton = document.createElement('a');
            viewButton.className = 'btn btn-info btn-sm me-2';
            viewButton.textContent = 'Xem';
            viewButton.href = URL.createObjectURL(file);
            viewButton.target = '_blank';

            // Nút xóa file
            const removeButton = document.createElement('button');
            removeButton.className = 'btn btn-danger btn-sm';
            removeButton.textContent = 'Xóa';
            removeButton.addEventListener('click', function () {
                fileList.removeChild(listItem);
            });

            // Thêm vào danh sách
            listItem.appendChild(viewButton);
            listItem.appendChild(removeButton);
            fileList.appendChild(listItem);
        });
    });

    // Khi submit, nếu không có file mới, giữ lại file cũ
    document.querySelector('form').addEventListener('submit', function () {
        if (document.getElementById('fileInput').files.length === 0) {
            document.getElementById('fileInput').disabled = true;
        }
    });



    // Xử lý chọn người chủ trì
    //$(document).ready(function () {
    //    $("#ddlHostUser").change(function () {
    //        // Nếu chọn từ combobox, disable textbox nhập tay
    //        if ($(this).val()) {
    //            $("#txtCustomHost").prop("disabled", true).val("");
    //        } else {
    //            $("#txtCustomHost").prop("disabled", false);
    //        }
    //    });

    //    $("#txtCustomHost").on("input", function () {
    //        // Nếu nhập tay, disable combobox
    //        if ($(this).val().trim().length > 0) {
    //            $("#ddlHostUser").prop("disabled", true);
    //        } else {
    //            $("#ddlHostUser").prop("disabled", false);
    //        }
    //    });
    //});

    document.getElementById('btnAddHost').addEventListener('click', function () {
    var selectedHostID = document.getElementById('ddlHostUser').value;
    var customHostName = document.getElementById('txtCustomHost').value.trim();

    if (!selectedHostID && !customHostName) {
        alert('Vui lòng chọn hoặc nhập người chủ trì.');
        return;
    }

    if (customHostName) {
        $.ajax({
            url: '@Url.Action("CreateNewHost", "ManageSchedule")',
            type: 'POST',
            data: JSON.stringify({ FullName: customHostName }),
            contentType: 'application/json',
            success: function (response) {
                if (response.success) {
                    alert(response.message);

                    // Kiểm tra nếu user đã tồn tại, cập nhật giá trị trong dropdown
                    var existingOption = [...document.getElementById('ddlHostUser').options].find(opt => opt.text === customHostName);
                    if (existingOption) {
                        existingOption.value = response.newUserID;
                        document.getElementById('ddlHostUser').value = response.newUserID;
                    } else {
                        // Nếu chưa có, thêm mới vào combobox
                        var newOption = document.createElement('option');
                        newOption.value = response.newUserID;
                        newOption.textContent = customHostName;
                        document.getElementById('ddlHostUser').appendChild(newOption);
                        document.getElementById('ddlHostUser').value = response.newUserID;
                    }

                    document.getElementById('txtCustomHost').value = ''; // Xóa textbox
                } else {
                    alert('Lỗi khi tạo người chủ trì.');
                }
            },
            error: function () {
                alert('Không thể tạo người chủ trì.');
            }
        });
    }
});


</script>