
@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@model QL_LICHHOP.ViewModels.MeetingViewModel
<style>
    .form-control, .form-select {
        border: 2px solid #007bff; /* Màu viền */
        border-radius: 0.25rem; /* Đường viền bo tròn */
        transition: border-color 0.2s; /* Hiệu ứng chuyển tiếp */
    }

        .form-control:focus, .form-select:focus {
            border-color: #0056b3; /* Màu viền khi có tiêu điểm */
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25); /* Hiệu ứng bóng */
        }

    #employeeSuggestions {
        background-color: #f1f1f1; /* Màu nền xám */
        border: 1px solid #ccc; /* Viền nhẹ */
        max-height: 200px; /* Chiều cao tối đa */
        overflow-y: auto; /* Cuộn khi vượt quá chiều cao */
        position: absolute; /* Để hiển thị ở vị trí chính xác */
        z-index: 1000; /* Đảm bảo hiển thị trên các phần tử khác */
    }

    .dropdown-item {
        padding: 10px; /* Khoảng cách trong mỗi mục */
        cursor: pointer; /* Con trỏ khi rê chuột vào */
    }

        .dropdown-item:hover {
            background-color: #e0e0e0; /* Màu nền khi rê chuột vào */
        }
</style>
@using (Html.BeginForm("Create", "ManageSchedule", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-group row mt-2">
        <label style="background-color: #cad6ef; text-align: right" class="col-md-2 col-form-label">Nơi đăng ký</label>
        <div class="col-md-2">
            <input type="text" class="form-control" value="@ViewBag.DepartmentName" readonly />
            <input type="hidden" name="DepartmentID" value="@ViewBag.DepartmentID" />
        </div>
        <label style="background-color: #cad6ef; text-align: right " class="col-md-2 col-form-label">Lịch làm việc của <span style="color: red">(*)</span></label>
        <div class="col-md-3">
            @Html.DropDownList("ScheduleTypeID", new SelectList(ViewBag.ScheduleTypes, "ScheduleTypeID", "Name"), new { @class = "form-select" })
        </div>
    </div>

    <div class="form-group row mt-2 d-flex align-items-center">
        <!-- Loại lịch -->
        <label class="col-md-2 col-form-label text-md-end" style="background-color: #cad6ef;">
            Loại lịch <span style="color: red">(*)</span>
        </label>
        <div class="col-md-2">
            @Html.DropDownListFor(m => m.ScheduleType, new SelectList(new List<SelectListItem>
            {
                new SelectListItem { Value = "Sáng", Text = "Sáng" },
                new SelectListItem { Value = "Chiều", Text = "Chiều" },
                new SelectListItem { Value = "Cả ngày", Text = "Cả ngày" }
            }, "Value", "Text"), new { @class = "form-select", required = "required" })
        </div>

        <!-- Thời gian (Nhãn chung) -->
        <label class="col-md-2 col-form-label text-md-end" style="background-color: #cad6ef;">
            Thời gian <span style="color: red">(*)</span>
        </label>

        <!-- Ngày & Giờ -->
        <div class="col-md-3 d-flex align-items-center">
            <label for="SDate" class="me-2">Ngày</label>
            <input type="text" id="SDate" name="SDate"
                   class="form-control me-2"
                   required="required"
                   value="@((Model.StartTime.HasValue) ? Model.StartTime.Value.ToString("dd/MM/yyyy") : DateTime.Now.ToString("dd/MM/yyyy"))"
                   placeholder="dd/mm/yyyy" style="width: 120px;" />

            <label for="STime" class="me-2">Giờ</label>
            <input type="time" id="STime" name="STime"
                   class="form-control"
                   required="required"
                   value="@((Model.StartTime.HasValue) ? Model.StartTime.Value.ToString("HH:mm") : DateTime.Now.ToString("HH:mm"))"
                   style="width: 100px;" />

            <input type="hidden" id="CombinedStartTime" name="StartTime" />
        </div>

        <!-- Thời gian họp dự kiến -->
        <label class="col-md-2 col-form-label text-md-end" style="background-color: #cad6ef;">
            Thời gian họp dự kiến (phút)
        </label>
        <div class="col-md-1">
            @Html.TextBoxFor(m => m.DurationMinutes, new { @class = "form-control", type = "number", required = "required", min = "0", style = "width: 100px;" })
        </div>
    </div>


    <div class="form-group row mt-2">
        <label style="background-color: #cad6ef; text-align: right" class="col-md-2 col-form-label">Người chủ trì</label>

        <!-- Combobox chọn người chủ trì từ danh sách -->
        <div class="col-md-2">
            @Html.DropDownList("HostUserID", new SelectList(ViewBag.Hosts, "UserID", "FullName"), "-- Chọn người chủ trì --", new { @class = "form-select", id = "ddlHostUser" })
        </div>

        <!-- Ô nhập liệu nếu muốn nhập người chủ trì khác -->
        <div class="col-md-3">
            <input type="text" id="txtCustomHost" class="form-control" placeholder="Nhập người chủ trì khác..." />
        </div>

        <!-- Nút thêm người chủ trì -->
        <div class="col-md-2">
            <button id="btnAddHost" type="button" class="btn btn-primary">Thêm mới người chủ trì</button>
        </div>
    </div>

    <div class="form-group row mt-2">
        <label style="background-color: #cad6ef; text-align: right" class="col-md-2 col-form-label">Nội dung <span style="color: red">(*)</span></label>
        <div class="col-md-9">
            @Html.TextAreaFor(m => m.Title, new { @class = "form-control", required = "required", rows = 4 }) <!-- Số dòng hiển thị -->
        </div>
    </div>

    <div class="form-group row mt-2">
        <label style="background-color: #cad6ef; text-align: right" class="col-md-2 col-form-label">Địa điểm</label>
        <div class="col-md-9">
            @Html.TextBoxFor(m => m.Location, new { @class = "form-control", required = "required" })
        </div>
    </div>

    <div class="form-group row mt-2">
        <label class="col-md-2 col-form-label" style="background-color: #cad6ef; text-align: right">
            Thành phần tham dự
        </label>
        <div class="col-md-2">
            <select id="department" class="form-select">
                <option value="">-- Chọn phòng ban --</option>
                @foreach (var department in ViewBag.Departments)
                {
                    <option value="@department.DepartmentID">@department.DepartmentName</option>
                }
            </select>
        </div>
        <div class="col-md-3">
            <input type="text" id="employeeName" class="form-control" placeholder="Nhập tên người tham dự" />
            <div id="employeeSuggestions" class="list-group"></div>
        </div>
        <div class="col-md-3">
            <button id="addParticipant" type="button" class="btn btn-primary">Thêm</button>
        </div>
    </div>

    <!-- Danh sách người tham dự -->
    <div class="form-group row mt-2">
        <div class="col-md-2"></div>
        <div class="col-md-9">
            <input type="hidden" id="employeeID" value="" />
            <ul id="participantList" class="list-group"></ul>
        </div>
    </div>


    <div class="form-group row mt-2">
        <label style="background-color: #cad6ef; text-align: right" class="col-md-2 col-form-label">Phương tiện</label>
        <div class="col-md-3">
            @Html.DropDownListFor(m => m.VehicleType, new SelectList(new List<SelectListItem>
            {
                new SelectListItem { Value = "Xe công ty", Text = "Xe công ty" },
                new SelectListItem { Value = "Xe cá nhân", Text = "Xe cá nhân" },
                new SelectListItem { Value = "Máy bay", Text = "Máy bay" }
            }, "Value", "Text"), "", new { @class = "form-select", required = "required" })
        </div>
    </div>

    <div class="form-group row mt-2">
        <label style="background-color: #cad6ef; text-align: right" class="col-md-2 col-form-label">Chuẩn bị</label>
        <div class="col-md-9">
            @Html.TextBoxFor(m => m.Title, new { @class = "form-control" })
        </div>
    </div>

    <div class="form-group row mt-2">
        <label style="background-color: #cad6ef; text-align: right" class="col-md-2 col-form-label">Đính kèm tài liệu họp</label>
        <div class="col-md-9">
            <input type="file" id="fileInput" name="Attachments" multiple class="form-control" />
        </div>
    </div>

    <div class="form-group row mt-2">
        <div class="col-md-2" style="background-color: #cad6ef"></div>
        <div class="col-md-9">
            <ul id="fileList" class="list-group">
                <!-- Danh sách tài liệu sẽ được thêm vào đây -->
            </ul>
        </div>
    </div>

    <center><button id="addMeeting" type="submit" class="btn btn-primary">Thêm lịch họp</button></center>
}

<script>
    // Xử lý thêm người tham dự
    document.getElementById('addParticipant').addEventListener('click', function () {
        var departmentSelect = document.getElementById('department');
        var departmentID = departmentSelect.value;
        var departmentName = departmentSelect.options[departmentSelect.selectedIndex]?.text;
        var employeeName = document.getElementById('employeeName').value.trim();
        var userID = document.getElementById('employeeID').value; // Lấy UserID từ một input ẩn

        if (!departmentID && !employeeName) {
            alert('Vui lòng chọn phòng ban hoặc nhập tên nhân viên.');
            return;
        }

        var participantList = document.getElementById('participantList');
        var listItem = document.createElement('li');
        listItem.className = 'list-group-item';
        if (departmentID && employeeName) {
            listItem.textContent = departmentName + ' - ' + employeeName;
        } else {
            listItem.textContent = departmentName;
        }

        // Input ẩn để bind dữ liệu vào Participants
        var hiddenDepartmentInput = document.createElement('input');
        hiddenDepartmentInput.type = 'hidden';
        hiddenDepartmentInput.name = 'Participants[' + participantList.children.length + '].DepartmentID';
        hiddenDepartmentInput.value = departmentID || '';

        var hiddenUserInput = document.createElement('input');
        hiddenUserInput.type = 'hidden';
        hiddenUserInput.name = 'Participants[' + participantList.children.length + '].UserID';
        hiddenUserInput.value = userID || '0'; // Nếu không có UserID, đặt tạm là 0

        listItem.appendChild(hiddenDepartmentInput);
        listItem.appendChild(hiddenUserInput);

        // Nút xóa
        var removeButton = document.createElement('button');
        removeButton.className = 'btn btn-danger btn-sm float-end';
        removeButton.textContent = 'Xóa';
        removeButton.addEventListener('click', function () {
            participantList.removeChild(listItem);
        });

        listItem.appendChild(removeButton);
        participantList.appendChild(listItem);

        // Reset các trường nhập liệu
        document.getElementById('employeeName').value = '';
        document.getElementById('employeeID').value = ''; // Reset UserID
    });



    document.addEventListener("DOMContentLoaded", function () {
        document.getElementById('employeeName').addEventListener('keyup', suggestEmployees);
    });

    // Gợi ý nhân viên theo ký tự nhập vào
    function suggestEmployees() {
        var departmentId = document.getElementById('department').value;
        var input = document.getElementById('employeeName');
        var query = input.value.trim();

        if (query.length < 1 || !departmentId) {
            document.getElementById('employeeSuggestions').innerHTML = "";
            document.getElementById('employeeSuggestions').style.display = "none";
            return;
        }

        $.ajax({
            url: '@Url.Action("SearchEmployees", "ManageSchedule")',
            type: 'GET',
            data: { departmentId: departmentId, query: query },
            success: function (employees) {
                var suggestionBox = document.getElementById('employeeSuggestions');
                suggestionBox.innerHTML = "";
                suggestionBox.style.display = "block";

                employees.forEach(function (employee) {
                    var option = document.createElement('div');
                    option.className = "dropdown-item";
                    option.textContent = employee.FullName;
                    option.onclick = function () {
                        input.value = employee.FullName;
                        document.getElementById('employeeID').value = employee.UserID;
                        suggestionBox.style.display = "none";
                    };
                    suggestionBox.appendChild(option);
                });
            }
        });
    }

    // Ẩn gợi ý khi click ra ngoài
    document.addEventListener("click", function (e) {
        if (!document.getElementById('employeeName').contains(e.target)) {
            document.getElementById('employeeSuggestions').style.display = "none";
        }
    });


    // Xử lý thêm tài liệu đính kèm
    document.getElementById('fileInput').addEventListener('change', function (event) {
        const fileList = document.getElementById('fileList');
        fileList.innerHTML = ''; // Xóa danh sách hiện tại để không trùng lặp

        Array.from(event.target.files).forEach((file) => {
            const listItem = document.createElement('li');
            listItem.className = 'list-group-item d-flex justify-content-between align-items-center';
            listItem.textContent = file.name;

            // Tạo nút xem
            const viewButton = document.createElement('a');
            viewButton.className = 'btn btn-info btn-sm me-2'; // Thêm khoảng cách bên phải
            viewButton.textContent = 'Xem';
            viewButton.href = URL.createObjectURL(file); // Tạo URL tạm thời cho file
            viewButton.target = '_blank'; // Mở trong tab mới
            viewButton.download = file.name; // Tải xuống khi nhấn vào

            // Tạo nút xóa
            const removeButton = document.createElement('button');
            removeButton.className = 'btn btn-danger btn-sm';
            removeButton.textContent = 'Xóa';
            removeButton.addEventListener('click', function () {
                fileList.removeChild(listItem);
                // Cập nhật lại danh sách fileInput
                const dataTransfer = new DataTransfer();
                Array.from(fileList.children).forEach(item => {
                    dataTransfer.items.add(item.file);
                });
                event.target.files = dataTransfer.files;
            });

            // Thêm nút vào listItem
            listItem.appendChild(viewButton);
            listItem.appendChild(removeButton);
            listItem.file = file; // Lưu file vào listItem để sử dụng khi xóa
            fileList.appendChild(listItem);
        });
    });

    // Xử lý chọn người chủ trì
    //$(document).ready(function () {
    //    $("#ddlHostUser").change(function () {
    //        // Nếu chọn từ combobox, disable textbox nhập tay
    //        if ($(this).val()) {
    //            $("#txtCustomHost").prop("disabled", true).val("");
    //        } else {
    //            $("#txtCustomHost").prop("disabled", false);
    //        }
    //    });

    //    $("#txtCustomHost").on("input", function () {
    //        // Nếu nhập tay, disable combobox
    //        if ($(this).val().trim().length > 0) {
    //            $("#ddlHostUser").prop("disabled", true);
    //        } else {
    //            $("#ddlHostUser").prop("disabled", false);
    //        }
    //    });
    //});

    document.getElementById('btnAddHost').addEventListener('click', function () {
    var selectedHostID = document.getElementById('ddlHostUser').value;
    var customHostName = document.getElementById('txtCustomHost').value.trim();

    if (!selectedHostID && !customHostName) {
        alert('Vui lòng chọn hoặc nhập người chủ trì.');
        return;
    }

    if (customHostName) {
        $.ajax({
            url: '@Url.Action("CreateNewHost", "ManageSchedule")',
            type: 'POST',
            data: JSON.stringify({ FullName: customHostName }),
            contentType: 'application/json',
            success: function (response) {
                if (response.success) {
                    alert(response.message);

                    // Kiểm tra nếu user đã tồn tại, cập nhật giá trị trong dropdown
                    var existingOption = [...document.getElementById('ddlHostUser').options].find(opt => opt.text === customHostName);
                    if (existingOption) {
                        existingOption.value = response.newUserID;
                        document.getElementById('ddlHostUser').value = response.newUserID;
                    } else {
                        // Nếu chưa có, thêm mới vào combobox
                        var newOption = document.createElement('option');
                        newOption.value = response.newUserID;
                        newOption.textContent = customHostName;
                        document.getElementById('ddlHostUser').appendChild(newOption);
                        document.getElementById('ddlHostUser').value = response.newUserID;
                    }

                    document.getElementById('txtCustomHost').value = ''; // Xóa textbox
                } else {
                    alert('Lỗi khi tạo người chủ trì.');
                }
            },
            error: function () {
                alert('Không thể tạo người chủ trì.');
            }
        });
    }
});

    $(document).ready(function () {
        $('#SDate').datepicker({
            format: 'dd/mm/yyyy', // Định dạng ngày hiển thị
            autoclose: true,
            todayHighlight: true
        });
    });
    function combineDateTime() {
        var dateInput = document.getElementById("SDate").value;
        var timeInput = document.getElementById("STime").value;

        if (dateInput && timeInput) {
            var dateParts = dateInput.split('/');
            var timeParts = timeInput.split(':');

            // Tạo đối tượng DateTime
            var combinedDateTime = new Date(dateParts[2], dateParts[1] - 1, dateParts[0], timeParts[0], timeParts[1]);

            // Cập nhật giá trị cho ô nhập liệu ẩn
            document.getElementById("CombinedStartTime").value = combinedDateTime.toISOString(); // Hoặc định dạng theo yêu cầu
        }
    }

    // Gọi hàm khi có sự thay đổi trong ô ngày hoặc giờ
    document.getElementById("SDate").addEventListener("change", combineDateTime);
    document.getElementById("STime").addEventListener("change", combineDateTime);
</script>
